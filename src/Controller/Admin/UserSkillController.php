<?php
namespace App\Controller\Admin;

use App\Model\Table\UserSkillTable;
use Cake\ORM\TableRegistry;
use Wpadmin\Controller\AppController;

/**
 * UserSkill Controller
 *
 * @property \App\Model\Table\UserSkillTable $UserSkill
 */
class UserSkillController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->UserSkill = TableRegistry::get('UserSkill');
    }

    /**
     * Index method
     *
     * @return void
     */
    public function index()
    {
        $this->set([
            'userSkills' => $this->UserSkill,
            'pageTitle' => '用户技能管理',
            'bread' => [
                'first' => ['name' => '客户服务'],
                'second' => ['name' => '用户技能管理'],
            ],
        ]);
    }

    /**
     * View method
     *
     * @param string|null $id User Skill id.
     * @return void
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function view($id = null)
    {
        $this->viewBuilder()->autoLayout(false);
        $userSkill = $this->UserSkill->get($id, [
            'contain' => ['Skills', 'Cost']
        ]);
        $this->set('userSkill', $userSkill);
        $this->set('_serialize', ['userSkill']);
        $this->set([
            'pageTitle' => '用户技能管理',
            'bread' => [
                'first' => ['name' => '客户服务'],
                'second' => ['name' => '用户技能管理'],
            ],
        ]);
    }

    /**
     * Add method
     *
     * @return void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $userSkill = $this->UserSkill->newEntity();
        if ($this->request->is('post')) {
            $userSkill = $this->UserSkill->patchEntity($userSkill, $this->request->data);
            if ($this->UserSkill->save($userSkill)) {
                $this->Util->ajaxReturn(true, '添加成功');
            } else {
                $errors = $userSkill->errors();
                $this->Util->ajaxReturn(['status' => false, 'msg' => getMessage($errors), 'errors' => $errors]);
            }
        }
        $skills = $this->UserSkill->Skill->find('list', ['limit' => 200]);
        $costs = $this->UserSkill->Cost->find('list', ['limit' => 200]);
        $tags = $this->UserSkill->Tag->find('list');
        $this->set(compact('userSkill', 'skills', 'costs', 'tags'));
        $this->set([
            'pageTitle' => '用户技能管理',
            'bread' => [
                'first' => ['name' => '客户服务'],
                'second' => ['name' => '用户技能管理'],
            ],
        ]);
    }

    /**
     * Edit method
     *
     * @param string|null $id User Skill id.
     * @return void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $userSkill = $this->UserSkill->get($id, [
            'contain' => ['Skill', 'Cost', 'User']
        ]);
        $oldCheck = $userSkill->is_checked;
        if ($this->request->is(['post', 'put'])) {
            $userSkill = $this->UserSkill->patchEntity($userSkill, $this->request->data);
            if ($this->UserSkill->save($userSkill)) {
                if($oldCheck != $userSkill->is_checked) {
                    switch($userSkill->is_checked) {
                        case 0:   //审核不通过
                            $this->Push->sendAlias(
                                $userSkill->user->user_token,
                                '抱歉，您的'.$userSkill->skill->name.'技能审核未通过',
                                '抱歉，您的'.$userSkill->skill->name.'技能审核未通过，主要原因是：约会说明涉嫌黄色信息；或表达不完整、不清晰。请返回我技能重新编辑发布。',
                                '抱歉，您的'.$userSkill->skill->name.'技能审核未通过',
                                'MY',
                                false
                            );
                            break;
                        case 1:   //审核通过
                            $this->Push->sendAlias(
                                $userSkill->user->user_token,
                                '恭喜您，'.$userSkill->skill->name.'技能审核通过',
                                '恭喜您，'.$userSkill->skill->name.'技能审核通过，关注度已大大提升！可以去发布约会啦~',
                                '恭喜您，'.$userSkill->skill->name.'技能审核通过',
                                'MY',
                                false
                            );
                            break;
                        case 2:   //未审核
                            break;
                    }
                }
                $this->Util->ajaxReturn(true, '修改成功');
            } else {
                $errors = $userSkill->errors();
                $this->Util->ajaxReturn(false, getMessage($errors));
            }
        }
        $skill = $this->UserSkill->Skill->find('list', ['limit' => 200]);
        $cost = $this->UserSkill->Cost->find('list', ['limit' => 200]);
        $this->set(compact('userSkill', 'skill', 'cost'));
        $this->set([
            'pageTitle' => '用户技能管理',
            'bread' => [
                'first' => ['name' => '客户服务'],
                'second' => ['name' => '用户技能管理'],
            ],
        ]);
    }

    /**
     * Delete method
     *
     * @param string|null $id User Skill id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod('post');
        $id = $this->request->data('id');
        if ($this->request->is('post')) {
            $userSkill = $this->UserSkill->get($id);
            if ($this->UserSkill->delete($userSkill)) {
                $this->Util->ajaxReturn(true, '删除成功');
            } else {
                $errors = $userSkill->errors();
                $this->Util->ajaxReturn(true, getMessage($errors));
            }
        }
    }

    /**
     * get jqgrid data
     *
     * @return json
     */
    public function getDataList()
    {
        $this->request->allowMethod('ajax');
        $page = $this->request->data('page');
        $rows = $this->request->data('rows');
        $sort = 'UserSkill.' . $this->request->data('sidx');
        $order = $this->request->data('sord');
        $begin_time = $this->request->data('begin_time');
        $end_time = $this->request->data('end_time');
        $where = [];
        if (!empty($begin_time) && !empty($end_time)) {
            $begin_time = date('Y-m-d', strtotime($begin_time));
            $end_time = date('Y-m-d', strtotime($end_time));
            $where['and'] = [['date(`create_time`) >' => $begin_time], ['date(`create_time`) <' => $end_time]];
        }
        $query = $this->UserSkill->find();
        $query->hydrate(false);
        if (!empty($where)) {
            $query->where($where);
        }
        $query->contain(['Skill', 'Cost', 'Tags']);
        $nums = $query->count();
        if (!empty($sort) && !empty($order)) {
            $query->order([$sort => $order]);
        }

        $query->limit(intval($rows))
            ->page(intval($page));
        $res = $query->toArray();
        if (empty($res)) {
            $res = array();
        }
        if ($nums > 0) {
            $total_pages = ceil($nums / $rows);
        } else {
            $total_pages = 0;
        }

        $data = array('page' => $page, 'total' => $total_pages, 'records' => $nums, 'rows' => $res);
        $this->autoRender = false;
        $this->response->type('json');
        $this->response->body(json_encode($data));
        $this->response->send();
        $this->response->stop();
    }

}
